> ################################################################################
> #                                                                              #
> # Student:    Seif Kungulio                                                    #
> # Date:       03/09/2025                                                       #
> # Subject:    Project 8                                                        #
> # Class:      DSCI 502                                                         #
> # Section:    01W                                                              #
> # Instructor: Sean Yang                                                        #
> # File Name:  Project8_Kungulio_Seif.R                                         #
> #                                                                              #
> ################################################################################
> 
> 
> ## 1. Load the dataset in breast_cancer_data.csv into R. Call the loaded data 
> ##    breast_cancer_data. Make sure that you have the directory set to the 
> ##    correct location for the data.
> 
> # Load necessary libraries
> library(ggplot2)  # For visualization
> library(dplyr)    # For data manipulation
> library(pscl)     # For McFadden's R-squared calculation
> 
> # Set the working directory to the correct location for the dataset.
> setwd("C:/PROJECTS/Maryville/DSCI-502/Week8")
> 
> # Load the data from breast_cancer_data.csv
> breast_cancer_data <- read.csv("breast_cancer_data.csv")
> 
> # Display the dimensions (rows and columns) of the dataframe
> dim(breast_cancer_data) # Shows the number of rows and columns in the dataset.
[1] 569  32
> 
> # Display column names
> colnames(breast_cancer_data)
 [1] "id"                      "diagnosis"               "radius_mean"            
 [4] "texture_mean"            "perimeter_mean"          "area_mean"              
 [7] "smoothness_mean"         "compactness_mean"        "concavity_mean"         
[10] "concave.points_mean"     "symmetry_mean"           "fractal_dimension_mean" 
[13] "radius_se"               "texture_se"              "perimeter_se"           
[16] "area_se"                 "smoothness_se"           "compactness_se"         
[19] "concavity_se"            "concave.points_se"       "symmetry_se"            
[22] "fractal_dimension_se"    "radius_worst"            "texture_worst"          
[25] "perimeter_worst"         "area_worst"              "smoothness_worst"       
[28] "compactness_worst"       "concavity_worst"         "concave.points_worst"   
[31] "symmetry_worst"          "fractal_dimension_worst"
> 
> # Displays the structure of the breast_cancer_data object.
> str(breast_cancer_data)
'data.frame':	569 obs. of  32 variables:
 $ id                     : int  842302 842517 84300903 84348301 84358402 843786 844359 84458202 844981 84501001 ...
 $ diagnosis              : chr  "M" "M" "M" "M" ...
 $ radius_mean            : num  18 20.6 19.7 11.4 20.3 ...
 $ texture_mean           : num  10.4 17.8 21.2 20.4 14.3 ...
 $ perimeter_mean         : num  122.8 132.9 130 77.6 135.1 ...
 $ area_mean              : num  1001 1326 1203 386 1297 ...
 $ smoothness_mean        : num  0.1184 0.0847 0.1096 0.1425 0.1003 ...
 $ compactness_mean       : num  0.2776 0.0786 0.1599 0.2839 0.1328 ...
 $ concavity_mean         : num  0.3001 0.0869 0.1974 0.2414 0.198 ...
 $ concave.points_mean    : num  0.1471 0.0702 0.1279 0.1052 0.1043 ...
 $ symmetry_mean          : num  0.242 0.181 0.207 0.26 0.181 ...
 $ fractal_dimension_mean : num  0.0787 0.0567 0.06 0.0974 0.0588 ...
 $ radius_se              : num  1.095 0.543 0.746 0.496 0.757 ...
 $ texture_se             : num  0.905 0.734 0.787 1.156 0.781 ...
 $ perimeter_se           : num  8.59 3.4 4.58 3.44 5.44 ...
 $ area_se                : num  153.4 74.1 94 27.2 94.4 ...
 $ smoothness_se          : num  0.0064 0.00522 0.00615 0.00911 0.01149 ...
 $ compactness_se         : num  0.049 0.0131 0.0401 0.0746 0.0246 ...
 $ concavity_se           : num  0.0537 0.0186 0.0383 0.0566 0.0569 ...
 $ concave.points_se      : num  0.0159 0.0134 0.0206 0.0187 0.0188 ...
 $ symmetry_se            : num  0.03 0.0139 0.0225 0.0596 0.0176 ...
 $ fractal_dimension_se   : num  0.00619 0.00353 0.00457 0.00921 0.00511 ...
 $ radius_worst           : num  25.4 25 23.6 14.9 22.5 ...
 $ texture_worst          : num  17.3 23.4 25.5 26.5 16.7 ...
 $ perimeter_worst        : num  184.6 158.8 152.5 98.9 152.2 ...
 $ area_worst             : num  2019 1956 1709 568 1575 ...
 $ smoothness_worst       : num  0.162 0.124 0.144 0.21 0.137 ...
 $ compactness_worst      : num  0.666 0.187 0.424 0.866 0.205 ...
 $ concavity_worst        : num  0.712 0.242 0.45 0.687 0.4 ...
 $ concave.points_worst   : num  0.265 0.186 0.243 0.258 0.163 ...
 $ symmetry_worst         : num  0.46 0.275 0.361 0.664 0.236 ...
 $ fractal_dimension_worst: num  0.1189 0.089 0.0876 0.173 0.0768 ...
> 
> 
> ## 2. Define a user defined function BoxplotPredictorOnTarget with two 
> ##    arguments, the target and one predictor to plot the box plot of predictor 
> ##    based on different category of the target. Then use this user defined 
> ##    function to generate the box plot:
> 
> # Convert Diagnosis to a factor
> breast_cancer_data$diagnosis <- factor(breast_cancer_data$diagnosis, 
+                                        levels = c("B", "M"), 
+                                        labels = c("Benign", "Malignant"))
> 
> # Define the user-defined function for boxplot
> BoxplotPredictorOnTarget <- function(target, predictor) {
+   ggplot(breast_cancer_data, aes(x = .data[[target]],
+                                  y = .data[[predictor]],
+                                  fill = .data[[target]])) +
+     geom_boxplot() + theme_test() +
+     labs(title = paste("Boxplot of", predictor, "by", target),
+          x = target, y = predictor)
+ }
> 
> ##### a) area_mean against diagnosis
> # Boxplot of area_mean against diagnosis
> BoxplotPredictorOnTarget("diagnosis", "area_mean")
> 
> ##### b) area_se against diagnosis
> # Boxplot of area_se against diagnosis
> BoxplotPredictorOnTarget("diagnosis", "area_se")
> 
> ##### c) texture_mean against diagnosis
> # Boxplot of texture_mean against diagnosis
> BoxplotPredictorOnTarget("diagnosis", "texture_mean")
> 
> 
> ## 3. Build the following logistic models to forecast the Diagnosis and 
> ##    recommend the best model based on McFadden/pseudo R squared to 
> ##    the management.
> 
> ##### a) forecast Diagnosis using area_mean
> model1 <- glm(diagnosis ~ area_mean, 
+               data = breast_cancer_data, 
+               family = binomial
+               )
> 
> ##### b) forecast the Diagnosis using area_mean and area_se
> model2 <- glm(diagnosis ~ area_mean + area_se, 
+               data = breast_cancer_data, 
+               family = binomial
+               )
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> ##### c) forecast the Diagnosis using area_mean, area_se and texture_mean
> model3 <- glm(diagnosis ~ area_mean + area_se + texture_mean, 
+               data = breast_cancer_data, 
+               family = binomial
+               )
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> ##### d) forecast the Diagnosis using area_mean, area_se, texture_mean and 
> #####    concavity_worst
> model4 <- glm(diagnosis ~ area_mean + area_se + texture_mean + concavity_worst, 
+               data = breast_cancer_data, 
+               family = binomial
+               )
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> ##### e) forecast the Diagnosis using area_mean, area_se, texture_mean, 
> #####    concavity_worst and concavity_mean
> model5 <- glm(diagnosis ~ area_mean + area_se + texture_mean + 
+                 concavity_worst + concavity_mean, 
+               data = breast_cancer_data, 
+               family = binomial
+               )
Warning message:
glm.fit: fitted probabilities numerically 0 or 1 occurred 
> 
> # Function to compute McFadden's R-squared for each model
> r_squared <- function(model) {
+   1 - (logLik(model)[1] / 
+          logLik(glm(diagnosis ~ 1, # Null model with only intercept
+                     data = breast_cancer_data,
+                     family = binomial))[1])
+   }
> 
> # Store all models in a list
> models <- list(model1, model2, model3, model4, model5)
> names(models) <- c("Model 1", "Model 2", "Model 3", "Model 4", "Model 5")
> 
> # Compute McFadden's R-squared for each model
> r_squared_values <- sapply(models, r_squared)
> 
> # Display the R-squared values, rounded to 4 decimal places
> round(r_squared_values, 4)
Model 1 Model 2 Model 3 Model 4 Model 5 
 0.5666  0.6142  0.6521  0.7833  0.7856 
> 
> # Recommend the best model based on the highest R-squared value
> best_model <- names(models)[which.max(r_squared_values)]
> paste("The best model based on McFadden's R-squared is", best_model)
[1] "The best model based on McFadden's R-squared is Model 5"
>